{"ast":null,"code":"import _regeneratorRuntime from \"/Users/I514234/Documents/etheroll/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/I514234/Documents/etheroll/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from 'web3';\nvar getWeb3 = new Promise(function (resolve, reject) {\n  window.addEventListener('load',\n  /*#__PURE__*/\n  _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var web3, results;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!window.ethereum) {\n              _context.next = 12;\n              break;\n            }\n\n            // Modern dapp browsers...\n            web3 = new Web3(window.ethereum);\n            _context.prev = 2;\n            _context.next = 5;\n            return window.ethereum.enable();\n\n          case 5:\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](2);\n            console.error(_context.t0);\n\n          case 10:\n            _context.next = 13;\n            break;\n\n          case 12:\n            if (window.web3) {\n              // Legacy dapp browsers...\n              web3 = new Web3(window.web3.currentProvider);\n            } else {\n              // Non-dapp browsers...\n              reject(new Error('Non-Ethereum browser detected. Is MetaMask running?'));\n            }\n\n          case 13:\n            results = {\n              web3: web3\n            };\n            resolve(results);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 7]]);\n  })));\n});\nexport default getWeb3;","map":{"version":3,"sources":["/Users/I514234/Documents/etheroll/src/utils/get-web3.js"],"names":["Web3","getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","enable","console","error","currentProvider","Error","results"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AAEA,IAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/CC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB;AAAA;AAAA;AAAA;AAAA,2BAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAE1BD,MAAM,CAACE,QAFmB;AAAA;AAAA;AAAA;;AAEP;AACrBC,YAAAA,IAAI,GAAG,IAAIR,IAAJ,CAASK,MAAM,CAACE,QAAhB,CAAP;AAH4B;AAAA;AAAA,mBAMpBF,MAAM,CAACE,QAAP,CAAgBE,MAAhB,EANoB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQ1BC,YAAAA,OAAO,CAACC,KAAR;;AAR0B;AAAA;AAAA;;AAAA;AAUvB,gBAAIN,MAAM,CAACG,IAAX,EAAiB;AAAE;AACxBA,cAAAA,IAAI,GAAG,IAAIR,IAAJ,CAASK,MAAM,CAACG,IAAP,CAAYI,eAArB,CAAP;AACD,aAFM,MAEA;AAAE;AACPR,cAAAA,MAAM,CAAC,IAAIS,KAAJ,CAAU,qDAAV,CAAD,CAAN;AACD;;AAd6B;AAexBC,YAAAA,OAfwB,GAed;AAAEN,cAAAA,IAAI,EAAJA;AAAF,aAfc;AAgB9BL,YAAAA,OAAO,CAACW,OAAD,CAAP;;AAhB8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhC;AAkBD,CAnBe,CAAhB;AAsBA,eAAeb,OAAf","sourcesContent":["import Web3 from 'web3';\n\nconst getWeb3 = new Promise((resolve, reject) => {\n  window.addEventListener('load', async () => {\n    let web3;\n    if (window.ethereum) { // Modern dapp browsers...\n      web3 = new Web3(window.ethereum);\n      try {\n        // Request account access if needed\n        await window.ethereum.enable();\n      } catch (error) {\n        console.error(error);\n      }\n    } else if (window.web3) { // Legacy dapp browsers...\n      web3 = new Web3(window.web3.currentProvider);\n    } else { // Non-dapp browsers...\n      reject(new Error('Non-Ethereum browser detected. Is MetaMask running?'));\n    }\n    const results = { web3 };\n    resolve(results);\n  });\n});\n\n\nexport default getWeb3;\n"]},"metadata":{},"sourceType":"module"}