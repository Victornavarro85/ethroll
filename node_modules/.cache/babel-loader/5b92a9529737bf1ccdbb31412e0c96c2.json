{"ast":null,"code":"import _defineProperty from \"/Users/I514234/Documents/etheroll/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/I514234/Documents/etheroll/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/I514234/Documents/etheroll/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/I514234/Documents/etheroll/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/I514234/Documents/etheroll/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/I514234/Documents/etheroll/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/I514234/Documents/etheroll/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/I514234/Documents/etheroll/src/components/Container.jsx\";\nimport React, { Fragment } from 'react';\nimport { Route } from 'react-router-dom';\nimport { FormattedMessage } from 'react-intl';\nimport { fromWei } from 'web3-utils';\nimport Alert from './Alert';\nimport CoinFlip from './CoinFlip';\nimport ContractInfo from './ContractInfo';\nimport RollUnder from './RollUnder';\nimport BetSize from './BetSize';\nimport ChanceOfWinning from './ChanceOfWinning';\nimport MetaMaskLink from './MetaMaskLink';\nimport getWeb3 from '../utils/get-web3';\nimport { EtherollContract, Networks, contractAddresses } from '../utils/etheroll-contract';\n\nvar showMessage = function showMessage(classType, message, updateAlertDict) {\n  var alertDict = {\n    classType: classType,\n    message: message\n  };\n  updateAlertDict(alertDict);\n};\n\nvar showFetchContractInfoWarning = function showFetchContractInfoWarning(showWarningMessage, optionalMessage) {\n  var defaultMessage = \"Can't fetch contract info.\";\n  var message = typeof optionalMessage === 'undefined' ? defaultMessage : optionalMessage;\n  showWarningMessage(message);\n};\n\nvar minBetCallback = function minBetCallback(showWarningMessage, updateValue) {\n  return function (error, minBetWei) {\n    error ? showFetchContractInfoWarning(showWarningMessage) : updateValue(Number(fromWei(minBetWei, 'ether')));\n  };\n};\n\nvar minNumberCallback = function minNumberCallback(showWarningMessage, updateValue) {\n  return function (error, minNumber) {\n    error ? showFetchContractInfoWarning(showWarningMessage) : updateValue(minNumber - 1);\n  };\n};\n\nvar maxNumberCallback = function maxNumberCallback(showWarningMessage, updateValue) {\n  return function (error, maxNumber) {\n    error ? showFetchContractInfoWarning(showWarningMessage) : updateValue(maxNumber - 1);\n  };\n};\n\nvar getBalanceCallback = function getBalanceCallback(showWarningMessage, updateValue) {\n  return function (error, balance) {\n    // error can be null with the balance also null in rare cases\n    error || balance === null ? showFetchContractInfoWarning(\"Can't fetch contract balance.\") : updateValue(Number(fromWei(balance, 'ether')));\n  };\n};\n\nvar getAccountBalanceCallback = function getAccountBalanceCallback(showWarningMessage, updateValue) {\n  return function (error, balance) {\n    // error can be null with the balance also null in rare cases\n    error || balance === null ? showWarningMessage(\"Can't fetch account balance.\") : updateValue(Number(fromWei(balance, 'ether')));\n  };\n};\n\nvar getAccountsCallback = function getAccountsCallback(web3, showWarningMessage, updateAccountAddress, updateAccountBalance) {\n  return function (error, accounts) {\n    if (error) {\n      var message = \"Can't retrieve accounts.\";\n      showWarningMessage(message);\n    } else {\n      var accountAddress = accounts.length === 0 ? null : accounts[0];\n\n      if (accountAddress !== null) {\n        web3.eth.getBalance(accountAddress, getAccountBalanceCallback(showWarningMessage, updateAccountBalance));\n      }\n\n      updateAccountAddress(accountAddress);\n    }\n  };\n};\n\nvar _filterTransactions = function filterTransactions(accountAddress, transactionsFilter, allTransactions, updateFilteredTransactions, updateTransactionsFilter) {\n  var filteredTransactions = allTransactions.slice();\n\n  if (transactionsFilter === '#my-transactions') {\n    filteredTransactions = allTransactions.filter(function (transaction) {\n      return transaction.logBetEvent.returnValues.PlayerAddress.toLowerCase() === accountAddress.toLowerCase();\n    });\n  }\n\n  updateFilteredTransactions(filteredTransactions);\n  updateTransactionsFilter(transactionsFilter);\n};\n\nvar getTransactions = function getTransactions(contract, accountAddress, transactionsFilter, updateAllTransactions, updateFilteredTransactions, updateTransactionsFilter) {\n  contract.getMergedTransactionLogs(function (error, result) {\n    if (error) {\n      console.log(error);\n    } else {\n      var allTransactions = result;\n      updateAllTransactions(allTransactions);\n\n      _filterTransactions(accountAddress, transactionsFilter, allTransactions, updateFilteredTransactions, updateTransactionsFilter);\n    }\n  });\n};\n\nvar Container =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Container, _React$Component);\n\n  function Container(props) {\n    var _this;\n\n    _classCallCheck(this, Container);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Container).call(this, props));\n    _this.state = {\n      alertDict: {},\n      betSize: 0.1,\n      chances: 50,\n      minBet: BetSize.defaultProps.min,\n      maxBet: BetSize.defaultProps.max,\n      minChances: ChanceOfWinning.defaultProps.min,\n      maxChances: ChanceOfWinning.defaultProps.max,\n      accountAddress: null,\n      accountBalance: 0,\n      network: Networks.mainnet,\n      contract: null,\n      contractAddress: contractAddresses[Networks.mainnet],\n      contractBalance: 0,\n      // most recent transaction is last in the array\n      allTransactions: [],\n      filteredTransactions: [],\n      transactionsFilter: '#all-transactions'\n    };\n    _this.onWeb3 = _this.onWeb3.bind(_assertThisInitialized(_this));\n    _this.updateState = _this.updateState.bind(_assertThisInitialized(_this));\n\n    _this.initWeb3();\n\n    return _this;\n  }\n\n  _createClass(Container, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.getTransactionsIntervalId);\n    }\n    /**\n     * Retrieves web3 and contract info, then sets the following states:\n     * - accountAddress\n     * - accountBalance\n     * - contract\n     * - contractAddress\n     * - contractBalance\n     * - minBet\n     * - maxBet (TODO)\n     * - maxChances\n     * - network\n     */\n\n  }, {\n    key: \"onWeb3\",\n    value: function onWeb3(web3) {\n      var _this2 = this;\n\n      var getIdCallback = function getIdCallback(network) {\n        var contractAddress = contractAddresses[network];\n        var contract = new EtherollContract(web3, contractAddress);\n        var pullIntervalSeconds = 10 * 1000;\n        var showWarningMessage = _this2.showWarningMessage,\n            updateState = _this2.updateState;\n        var _this2$state = _this2.state,\n            transactionsFilter = _this2$state.transactionsFilter,\n            accountAddress = _this2$state.accountAddress;\n\n        var getTransactionsAlias = function getTransactionsAlias() {\n          return getTransactions(contract, accountAddress, transactionsFilter, updateState('allTransactions'), updateState('filteredTransactions'), updateState('transactionsFilter'));\n        }; // clearInterval() is in the componentWillUnmount()\n\n\n        _this2.getTransactionsIntervalId = setInterval(function () {\n          return getTransactionsAlias();\n        }, pullIntervalSeconds);\n        getTransactionsAlias();\n\n        _this2.setState({\n          network: network,\n          contract: contract,\n          contractAddress: contractAddress\n        });\n\n        contract.web3Contract.methods.minBet().call(minBetCallback(showWarningMessage, updateState('minBet')));\n        contract.web3Contract.methods.minNumber().call(minNumberCallback(showWarningMessage, updateState('minChances')));\n        contract.web3Contract.methods.maxNumber().call(maxNumberCallback(showWarningMessage, updateState('maxChances')));\n        web3.eth.getBalance(contractAddress, getBalanceCallback(showWarningMessage, updateState('contractBalance')));\n        web3.eth.getAccounts(getAccountsCallback(web3, showWarningMessage, updateState('accountAddress'), updateState('accountBalance')));\n      };\n\n      web3.eth.net.getId().then(getIdCallback);\n    }\n  }, {\n    key: \"initWeb3\",\n    value: function initWeb3() {\n      var _this3 = this;\n\n      var getWeb3CallbackOk = function getWeb3CallbackOk(_ref) {\n        var web3 = _ref.web3;\n\n        _this3.onWeb3(web3);\n      };\n\n      var getWeb3CallbackError = function getWeb3CallbackError() {\n        var classType = 'danger';\n        var message = React.createElement(Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 212\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"container.no-account-connected\",\n          defaultMessage: 'No account connected, connect with a Web3-compatible wallet like {metamaskLink}',\n          values: {\n            metamaskLink: React.createElement(MetaMaskLink, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 216\n              },\n              __self: this\n            })\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 213\n          },\n          __self: this\n        }));\n        showMessage(classType, message, _this3.updateState('alertDict'));\n      };\n\n      getWeb3.then(getWeb3CallbackOk, getWeb3CallbackError);\n    }\n  }, {\n    key: \"showWarningMessage\",\n    value: function showWarningMessage(message) {\n      var classType = 'warning';\n      showMessage(classType, message, this.updateState('alertDict'));\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(key) {\n      var _this4 = this;\n\n      return function (value) {\n        _this4.setState(_defineProperty({}, key, value));\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var _this$state = this.state,\n          alertDict = _this$state.alertDict,\n          accountAddress = _this$state.accountAddress,\n          accountBalance = _this$state.accountBalance,\n          allTransactions = _this$state.allTransactions,\n          betSize = _this$state.betSize,\n          chances = _this$state.chances,\n          contract = _this$state.contract,\n          contractAddress = _this$state.contractAddress,\n          contractBalance = _this$state.contractBalance,\n          filteredTransactions = _this$state.filteredTransactions,\n          maxBet = _this$state.maxBet,\n          minBet = _this$state.minBet,\n          maxChances = _this$state.maxChances,\n          minChances = _this$state.minChances,\n          network = _this$state.network,\n          transactionsFilter = _this$state.transactionsFilter;\n      var gameProps = {\n        accountAddress: accountAddress,\n        betSize: betSize,\n        chances: chances,\n        contract: contract,\n        filteredTransactions: filteredTransactions,\n        transactionsFilter: transactionsFilter,\n        maxBet: maxBet,\n        minBet: minBet,\n        maxChances: maxChances,\n        minChances: minChances,\n        network: network,\n        updateState: this.updateState,\n        filterTransactions: function filterTransactions(filter) {\n          return _filterTransactions(accountAddress, filter, allTransactions, _this5.updateState('filteredTransactions'), _this5.updateState('transactionsFilter'));\n        }\n      };\n      var contractProps = {\n        accountAddress: accountAddress,\n        accountBalance: accountBalance,\n        contractAddress: contractAddress,\n        contractBalance: contractBalance,\n        network: network\n      };\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      }, React.createElement(Alert, {\n        classType: alertDict.classType,\n        message: alertDict.message,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }), React.createElement(ContractInfo, Object.assign({}, contractProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      })), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"container.place-your-bet\",\n        defaultMessage: \"Place your bet\",\n        description: \"Place your bet title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      })), React.createElement(Route, {\n        path: \"/\",\n        exact: true,\n        render: function render() {\n          return React.createElement(RollUnder, Object.assign({}, gameProps, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 276\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/coin-flip\",\n        render: function render() {\n          return React.createElement(CoinFlip, Object.assign({}, gameProps, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 277\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Container;\n}(React.Component);\n\nexport default Container;","map":{"version":3,"sources":["/Users/I514234/Documents/etheroll/src/components/Container.jsx"],"names":["React","Fragment","Route","FormattedMessage","fromWei","Alert","CoinFlip","ContractInfo","RollUnder","BetSize","ChanceOfWinning","MetaMaskLink","getWeb3","EtherollContract","Networks","contractAddresses","showMessage","classType","message","updateAlertDict","alertDict","showFetchContractInfoWarning","showWarningMessage","optionalMessage","defaultMessage","minBetCallback","updateValue","error","minBetWei","Number","minNumberCallback","minNumber","maxNumberCallback","maxNumber","getBalanceCallback","balance","getAccountBalanceCallback","getAccountsCallback","web3","updateAccountAddress","updateAccountBalance","accounts","accountAddress","length","eth","getBalance","filterTransactions","transactionsFilter","allTransactions","updateFilteredTransactions","updateTransactionsFilter","filteredTransactions","slice","filter","transaction","logBetEvent","returnValues","PlayerAddress","toLowerCase","getTransactions","contract","updateAllTransactions","getMergedTransactionLogs","result","console","log","Container","props","state","betSize","chances","minBet","defaultProps","min","maxBet","max","minChances","maxChances","accountBalance","network","mainnet","contractAddress","contractBalance","onWeb3","bind","updateState","initWeb3","clearInterval","getTransactionsIntervalId","getIdCallback","pullIntervalSeconds","getTransactionsAlias","setInterval","setState","web3Contract","methods","call","getAccounts","net","getId","then","getWeb3CallbackOk","getWeb3CallbackError","metamaskLink","key","value","gameProps","contractProps","Component"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport { Route } from 'react-router-dom';\nimport { FormattedMessage } from 'react-intl';\nimport { fromWei } from 'web3-utils';\nimport Alert from './Alert';\nimport CoinFlip from './CoinFlip';\nimport ContractInfo from './ContractInfo';\nimport RollUnder from './RollUnder';\nimport BetSize from './BetSize';\nimport ChanceOfWinning from './ChanceOfWinning';\nimport MetaMaskLink from './MetaMaskLink';\nimport getWeb3 from '../utils/get-web3';\nimport {\n  EtherollContract, Networks, contractAddresses,\n} from '../utils/etheroll-contract';\n\n\nconst showMessage = (classType, message, updateAlertDict) => {\n  const alertDict = { classType, message };\n  updateAlertDict(alertDict);\n};\n\nconst showFetchContractInfoWarning = (showWarningMessage, optionalMessage) => {\n  const defaultMessage = \"Can't fetch contract info.\";\n  const message = (typeof optionalMessage === 'undefined') ? defaultMessage : optionalMessage;\n  showWarningMessage(message);\n};\n\nconst minBetCallback = (showWarningMessage, updateValue) => (error, minBetWei) => {\n  error ? showFetchContractInfoWarning(showWarningMessage) : (\n    updateValue(Number(fromWei(minBetWei, 'ether')))\n  );\n};\n\nconst minNumberCallback = (showWarningMessage, updateValue) => (error, minNumber) => {\n  error ? showFetchContractInfoWarning(showWarningMessage) : updateValue(minNumber - 1);\n};\n\nconst maxNumberCallback = (showWarningMessage, updateValue) => (error, maxNumber) => {\n  error ? showFetchContractInfoWarning(showWarningMessage) : updateValue(maxNumber - 1);\n};\n\nconst getBalanceCallback = (showWarningMessage, updateValue) => (error, balance) => {\n  // error can be null with the balance also null in rare cases\n  (error || balance === null) ? showFetchContractInfoWarning(\"Can't fetch contract balance.\") : (\n    updateValue(Number(fromWei(balance, 'ether')))\n  );\n};\n\nconst getAccountBalanceCallback = (showWarningMessage, updateValue) => (error, balance) => {\n  // error can be null with the balance also null in rare cases\n  (error || balance === null) ? showWarningMessage(\"Can't fetch account balance.\") : (\n    updateValue(Number(fromWei(balance, 'ether')))\n  );\n};\n\nconst getAccountsCallback = (\n  web3, showWarningMessage, updateAccountAddress, updateAccountBalance,\n) => (error, accounts) => {\n  if (error) {\n    const message = \"Can't retrieve accounts.\";\n    showWarningMessage(message);\n  } else {\n    const accountAddress = accounts.length === 0 ? null : accounts[0];\n    if (accountAddress !== null) {\n      web3.eth.getBalance(\n        accountAddress,\n        getAccountBalanceCallback(\n          showWarningMessage,\n          updateAccountBalance,\n        ),\n      );\n    }\n    updateAccountAddress(accountAddress);\n  }\n};\n\nconst filterTransactions = (\n  accountAddress, transactionsFilter, allTransactions,\n  updateFilteredTransactions, updateTransactionsFilter,\n) => {\n  let filteredTransactions = allTransactions.slice();\n  if (transactionsFilter === '#my-transactions') {\n    filteredTransactions = allTransactions.filter(transaction => (\n      transaction.logBetEvent.returnValues.PlayerAddress.toLowerCase()\n      === accountAddress.toLowerCase()\n    ));\n  }\n  updateFilteredTransactions(filteredTransactions);\n  updateTransactionsFilter(transactionsFilter);\n};\n\nconst getTransactions = (\n  contract, accountAddress, transactionsFilter,\n  updateAllTransactions, updateFilteredTransactions, updateTransactionsFilter,\n) => {\n  contract.getMergedTransactionLogs((error, result) => {\n    if (error) {\n      console.log(error);\n    } else {\n      const allTransactions = result;\n      updateAllTransactions(allTransactions);\n      filterTransactions(\n        accountAddress, transactionsFilter, allTransactions,\n        updateFilteredTransactions, updateTransactionsFilter,\n      );\n    }\n  });\n};\n\nclass Container extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      alertDict: {},\n      betSize: 0.1,\n      chances: 50,\n      minBet: BetSize.defaultProps.min,\n      maxBet: BetSize.defaultProps.max,\n      minChances: ChanceOfWinning.defaultProps.min,\n      maxChances: ChanceOfWinning.defaultProps.max,\n      accountAddress: null,\n      accountBalance: 0,\n      network: Networks.mainnet,\n      contract: null,\n      contractAddress: contractAddresses[Networks.mainnet],\n      contractBalance: 0,\n      // most recent transaction is last in the array\n      allTransactions: [],\n      filteredTransactions: [],\n      transactionsFilter: '#all-transactions',\n    };\n    this.onWeb3 = this.onWeb3.bind(this);\n    this.updateState = this.updateState.bind(this);\n    this.initWeb3();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.getTransactionsIntervalId);\n  }\n\n  /**\n   * Retrieves web3 and contract info, then sets the following states:\n   * - accountAddress\n   * - accountBalance\n   * - contract\n   * - contractAddress\n   * - contractBalance\n   * - minBet\n   * - maxBet (TODO)\n   * - maxChances\n   * - network\n   */\n  onWeb3(web3) {\n    const getIdCallback = (network) => {\n      const contractAddress = contractAddresses[network];\n      const contract = new EtherollContract(web3, contractAddress);\n      const pullIntervalSeconds = 10 * 1000;\n      const { showWarningMessage, updateState } = this;\n      const { transactionsFilter, accountAddress } = this.state;\n      const getTransactionsAlias = () => getTransactions(\n        contract, accountAddress, transactionsFilter,\n        updateState('allTransactions'), updateState('filteredTransactions'), updateState('transactionsFilter'),\n      );\n      // clearInterval() is in the componentWillUnmount()\n      this.getTransactionsIntervalId = setInterval(\n        () => getTransactionsAlias(), pullIntervalSeconds,\n      );\n      getTransactionsAlias();\n      this.setState({\n        network,\n        contract,\n        contractAddress,\n      });\n      contract.web3Contract.methods.minBet().call(\n        minBetCallback(\n          showWarningMessage, updateState('minBet'),\n        ),\n      );\n      contract.web3Contract.methods.minNumber().call(\n        minNumberCallback(\n          showWarningMessage, updateState('minChances'),\n        ),\n      );\n      contract.web3Contract.methods.maxNumber().call(\n        maxNumberCallback(\n          showWarningMessage, updateState('maxChances'),\n        ),\n      );\n      web3.eth.getBalance(\n        contractAddress,\n        getBalanceCallback(\n          showWarningMessage, updateState('contractBalance'),\n        ),\n      );\n      web3.eth.getAccounts(\n        getAccountsCallback(\n          web3, showWarningMessage, updateState('accountAddress'), updateState('accountBalance'),\n        ),\n      );\n    };\n    web3.eth.net.getId().then(getIdCallback);\n  }\n\n  initWeb3() {\n    const getWeb3CallbackOk = ({ web3 }) => {\n      this.onWeb3(web3);\n    };\n    const getWeb3CallbackError = () => {\n      const classType = 'danger';\n      const message = (\n        <Fragment>\n          <FormattedMessage\n            id=\"container.no-account-connected\"\n            defaultMessage={'No account connected, connect with a Web3-compatible wallet like {metamaskLink}'}\n            values={{ metamaskLink: <MetaMaskLink /> }}\n          />\n        </Fragment>\n      );\n      showMessage(classType, message, this.updateState('alertDict'));\n    };\n    getWeb3.then(getWeb3CallbackOk, getWeb3CallbackError);\n  }\n\n  showWarningMessage(message) {\n    const classType = 'warning';\n    showMessage(classType, message, this.updateState('alertDict'));\n  }\n\n  updateState(key) {\n    return (value) => {\n      this.setState({ [key]: value });\n    };\n  }\n\n  render() {\n    const {\n      alertDict, accountAddress, accountBalance, allTransactions, betSize, chances, contract,\n      contractAddress, contractBalance, filteredTransactions, maxBet, minBet, maxChances,\n      minChances, network, transactionsFilter,\n    } = this.state;\n\n    const gameProps = {\n      accountAddress,\n      betSize,\n      chances,\n      contract,\n      filteredTransactions,\n      transactionsFilter,\n      maxBet,\n      minBet,\n      maxChances,\n      minChances,\n      network,\n      updateState: this.updateState,\n      filterTransactions: filter => filterTransactions(\n        accountAddress, filter, allTransactions,\n        this.updateState('filteredTransactions'), this.updateState('transactionsFilter'),\n      ),\n    };\n    const contractProps = {\n      accountAddress, accountBalance, contractAddress, contractBalance, network,\n    };\n\n    return (\n      <div className=\"container\">\n        <Alert classType={alertDict.classType} message={alertDict.message} />\n        <ContractInfo {...contractProps} />\n        <h2>\n          <FormattedMessage\n            id=\"container.place-your-bet\"\n            defaultMessage=\"Place your bet\"\n            description=\"Place your bet title\"\n          />\n        </h2>\n        <Route path=\"/\" exact render={() => <RollUnder {...gameProps} />} />\n        <Route path=\"/coin-flip\" render={() => <CoinFlip {...gameProps} />} />\n      </div>\n    );\n  }\n}\n\nexport default Container;\n"]},"metadata":{},"sourceType":"module"}