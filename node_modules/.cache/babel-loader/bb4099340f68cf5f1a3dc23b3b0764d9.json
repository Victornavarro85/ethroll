{"ast":null,"code":"import _classCallCheck from \"/Users/I514234/Documents/etheroll/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/I514234/Documents/etheroll/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"/Users/I514234/Documents/etheroll/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _contractAddresses, _etherscanUrls;\n\nimport etherollAbi from './etheroll-abi'; // TODO require vs import\n// const SolidityEvent = require('web3/lib/web3/event.js');\n\nvar HOUSE_EDGE = 1 / 100.0;\nvar Networks = Object.freeze({\n  mainnet: 1,\n  morden: 2,\n  ropsten: 3,\n  rinkeby: 4\n});\nvar contractAddresses = (_contractAddresses = {}, _defineProperty(_contractAddresses, Networks.mainnet, '0xf478c8Bc5448236d52067c96F8f4C8376E62Fa8f'), _defineProperty(_contractAddresses, Networks.ropsten, '0xCDa35b320db29C42ba3A36aC448D4C963AD2CcAe'), _defineProperty(_contractAddresses, Networks.rinkeby, '0x79Ed7BD41CB093A2739F8E112a97D057cC4af4f0'), _contractAddresses);\nvar etherscanUrls = (_etherscanUrls = {}, _defineProperty(_etherscanUrls, Networks.mainnet, 'https://etherscan.io'), _defineProperty(_etherscanUrls, Networks.ropsten, 'https://ropsten.etherscan.io'), _etherscanUrls);\n\nvar getPayout = function getPayout(betSize, winningChances) {\n  return 100 / winningChances * betSize;\n};\n\nvar cutHouseEdge = function cutHouseEdge(payout) {\n  return payout * (1 - HOUSE_EDGE);\n};\n\nvar getProfit = function getProfit(betSize, winningChances) {\n  if (winningChances === 0) {\n    return 0;\n  }\n\n  var rawPayout = getPayout(betSize, winningChances);\n  var netPayout = cutHouseEdge(rawPayout);\n  return Math.max(netPayout - betSize, 0);\n}; // Merges bet logs (LogBet) with bet results logs (LogResult).\n\n\nvar mergeLogs = function mergeLogs(logBetEvents, logResultEvents) {\n  var findLogResultEventBylogBetEvent = function findLogResultEventBylogBetEvent(logBetEvent) {\n    return logResultEvents.find(function (logResultEvent) {\n      return logResultEvent.returnValues.BetID === logBetEvent.returnValues.BetID;\n    });\n  };\n\n  return logBetEvents.map(function (logBetEvent) {\n    return {\n      logBetEvent: logBetEvent,\n      logResultEvent: findLogResultEventBylogBetEvent(logBetEvent)\n    };\n  });\n};\n\nvar EtherollContract =\n/*#__PURE__*/\nfunction () {\n  function EtherollContract(web3, address) {\n    _classCallCheck(this, EtherollContract);\n\n    this.web3 = web3;\n    this.address = address;\n    this.abi = etherollAbi;\n    this.web3Contract = new web3.eth.Contract(etherollAbi, address);\n  } // callback(error, result)\n\n\n  _createClass(EtherollContract, [{\n    key: \"getTransactionLogs\",\n    value: function getTransactionLogs(callback) {\n      var _this = this;\n\n      this.web3.eth.getBlockNumber(function (error, blockNumber) {\n        if (error) {\n          console.log(error);\n        } else {\n          var address = _this.address;\n          var toBlock = blockNumber;\n          var fromBlock = toBlock - 100;\n          var options = {\n            address: address,\n            fromBlock: fromBlock,\n            toBlock: toBlock\n          };\n\n          _this.web3Contract.getPastEvents('allEvents', options, callback);\n        }\n      });\n    } // callback(error, result)\n\n  }, {\n    key: \"getMergedTransactionLogs\",\n    value: function getMergedTransactionLogs(callback) {\n      this.getTransactionLogs(function (error, result) {\n        if (error) {\n          console.log(error);\n        } else {\n          var logBetEvents = result.filter(function (evnt) {\n            return evnt.event === 'LogBet';\n          });\n          var logResultEvents = result.filter(function (evnt) {\n            return evnt.event === 'LogResult';\n          });\n          var mergedLogs = mergeLogs(logBetEvents, logResultEvents);\n          callback(error, mergedLogs);\n        }\n      });\n    }\n  }]);\n\n  return EtherollContract;\n}();\n\nexport { EtherollContract, etherscanUrls, getProfit, mergeLogs, Networks, contractAddresses };","map":{"version":3,"sources":["/Users/I514234/Documents/etheroll/src/utils/etheroll-contract.js"],"names":["etherollAbi","HOUSE_EDGE","Networks","Object","freeze","mainnet","morden","ropsten","rinkeby","contractAddresses","etherscanUrls","getPayout","betSize","winningChances","cutHouseEdge","payout","getProfit","rawPayout","netPayout","Math","max","mergeLogs","logBetEvents","logResultEvents","findLogResultEventBylogBetEvent","logBetEvent","find","logResultEvent","returnValues","BetID","map","EtherollContract","web3","address","abi","web3Contract","eth","Contract","callback","getBlockNumber","error","blockNumber","console","log","toBlock","fromBlock","options","getPastEvents","getTransactionLogs","result","filter","evnt","event","mergedLogs"],"mappings":"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","sourcesContent":["import etherollAbi from './etheroll-abi';\n\n// TODO require vs import\n// const SolidityEvent = require('web3/lib/web3/event.js');\n\nconst HOUSE_EDGE = 1 / 100.0;\n\nconst Networks = Object.freeze({ mainnet: 1, morden: 2, ropsten: 3, rinkeby:4});\n\nconst contractAddresses = {\n  [Networks.mainnet]: '0xf478c8Bc5448236d52067c96F8f4C8376E62Fa8f',\n  //[Networks.ropsten]: '0xe12c6dEb59f37011d2D9FdeC77A6f1A8f3B8B1e8',\n  [Networks.ropsten]: '0xCDa35b320db29C42ba3A36aC448D4C963AD2CcAe',\n  [Networks.rinkeby]: '0x79Ed7BD41CB093A2739F8E112a97D057cC4af4f0'\n\n};\n\nconst etherscanUrls = {\n  [Networks.mainnet]: 'https://etherscan.io',\n  [Networks.ropsten]: 'https://ropsten.etherscan.io',\n};\n\n\nconst getPayout = (betSize, winningChances) => (\n  100 / winningChances * betSize\n);\n\nconst cutHouseEdge = payout => (\n  payout * (1 - HOUSE_EDGE)\n);\n\nconst getProfit = (betSize, winningChances) => {\n  if (winningChances === 0) {\n    return 0;\n  }\n  const rawPayout = getPayout(betSize, winningChances);\n  const netPayout = cutHouseEdge(rawPayout);\n\n  return Math.max(netPayout - betSize, 0);\n};\n\n\n// Merges bet logs (LogBet) with bet results logs (LogResult).\nconst mergeLogs = (logBetEvents, logResultEvents) => {\n  const findLogResultEventBylogBetEvent = logBetEvent => (\n    logResultEvents.find(logResultEvent => (\n      logResultEvent.returnValues.BetID === logBetEvent.returnValues.BetID\n    ))\n  );\n\n  return logBetEvents.map(logBetEvent => ({\n    logBetEvent,\n    logResultEvent: findLogResultEventBylogBetEvent(logBetEvent),\n  }));\n};\n\nclass EtherollContract {\n  constructor(web3, address) {\n    this.web3 = web3;\n    this.address = address;\n    this.abi = etherollAbi;\n    this.web3Contract = new web3.eth.Contract(etherollAbi, address);\n  }\n\n  // callback(error, result)\n  getTransactionLogs(callback) {\n    this.web3.eth.getBlockNumber((error, blockNumber) => {\n      if (error) {\n        console.log(error);\n      } else {\n        const { address } = this;\n        const toBlock = blockNumber;\n        const fromBlock = toBlock - 100;\n        const options = {\n          address,\n          fromBlock,\n          toBlock,\n        };\n        this.web3Contract.getPastEvents('allEvents', options, callback);\n      }\n    });\n  }\n\n  // callback(error, result)\n  getMergedTransactionLogs(callback) {\n    this.getTransactionLogs((error, result) => {\n      if (error) {\n        console.log(error);\n      } else {\n        const logBetEvents = result.filter(evnt => evnt.event === 'LogBet');\n        const logResultEvents = result.filter(evnt => evnt.event === 'LogResult');\n        const mergedLogs = mergeLogs(logBetEvents, logResultEvents);\n        callback(error, mergedLogs);\n      }\n    });\n  }\n}\n\n\nexport {\n  EtherollContract, etherscanUrls, getProfit, mergeLogs, Networks, contractAddresses,\n};\n"]},"metadata":{},"sourceType":"module"}